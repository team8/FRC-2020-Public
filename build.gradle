import edu.wpi.first.gradlerio.GradleRIOPlugin

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2020.2.2"
    id "com.diffplug.gradle.spotless" version "3.27.1"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "com.palyrobotics.frc2020.robot.RobotStarter"

compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

spotless {
    java {
        importOrder 'java', 'javax', 'com', 'edu', 'org'
        trimTrailingWhitespace()
        indentWithTabs()
        endWithNewline()
        removeUnusedImports()
        eclipse().configFile 'spotless.xml'
    }
    freshmark {
        target 'README.md', 'CONTRIBUTING.md'
        propertiesFile('gradle/wrapper/gradle-wrapper.properties')
        properties {
            it.put('key', 'value')
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Maven central needed for JUnit
repositories {
    mavenCentral()
    maven { url "https://clojars.org/repo" }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)

    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.1'
    implementation 'net.sourceforge.argparse4j:argparse4j:0.8.1'
    implementation 'kryonet:kryonet:2.21'
    implementation 'com.esotericsoftware:kryo:4.0.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

test {
    useJUnitPlatform {
        excludeTags 'slow'
    }
}
